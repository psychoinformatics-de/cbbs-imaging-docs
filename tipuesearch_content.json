{"pages":[{"url":"services/","text":"Add high-level description on what this does, for whom, under which conditions.","tags":"pages","title":"Services Provided"},{"url":"processing/","text":"Sub pages should describe what we support and what those steps do exactly. Focus on the individual technique and not on the general nature of the processing (i.e. container handling, etc)","tags":"pages","title":"Data Processing"},{"url":"processing/creation/","text":"Start off with a clone of https://github.com/psychoinformatics-de/cbbs-imaging-container-import , which also provides additional tools apart from sheer creation. Then run singularity run cbbs-imaging-container-import/cbbs-imaging.simg create [TARGET-DIR] . If you don't provide a target dir, the dataset will be created in the current working directory. Adding an MRI session The above mentioned container also provides a command to import a tarball for a session. This will result in a subdataset with the DICOMs in it, that provides the DICOM metadata for easy access via datalad . To import such a tarball run singularity run cbbs-imaging-container-import/cbbs-imaging.simg import [TARBALL] . Note, that TARBALL needs to be an absolute path at the moment. A session name like af29_0678 will be derived from the dicoms' metadata and a subdirectory with that is created. In that subdirectory you should then find a studyspec.json , which is needed for conversion later on and a subdirectory dicoms , which is in fact a subdataset containing the actual dicoms.","tags":"processing","title":"Creating a study dataset"},{"url":"processing/conversion/","text":"","tags":"processing","title":"Raw Data Conversion"},{"url":"devices/","text":"Add general info on those devices, whom to contact, possible limitations of support wrt the services provided.","tags":"pages","title":"Data Acquisition Devices"},{"url":"devices/magnetom/","text":"This is just a placeholder.","tags":"devices","title":"7T Siemens Magnetom"},{"url":"devices/achieva/","text":"This is just a placeholder.","tags":"devices","title":"3T Philips Achieva"},{"url":"devices/prisma/","text":"This is just a placeholder.","tags":"devices","title":"3T Siemens Prisma"},{"url":"devices/skyra/","text":"This is just a placeholder.","tags":"devices","title":"3T Siemens Skyra"},{"url":"devices/verio/","text":"This is just a placeholder.","tags":"devices","title":"3T Siemens Verio"},{"url":"devices/eyelink/","text":"This is just a placeholder.","tags":"devices","title":"Eyelink 1000"},{"url":"devices/stadlerphysio/","text":"This is Jörg's physio recording box for the Siemens machines. We need to ask him what we should call it.","tags":"devices","title":"Physio box"},{"url":"tools/","text":"","tags":"pages","title":"Tools"},{"url":"tools/containers/","text":"Add references and infos for all the ready-made containers that we provide raw data conversion","tags":"tools","title":"Computational Environments"},{"url":"tools/datalad/","text":"","tags":"tools","title":"Datalad"},{"url":"tools/git/","text":"Git enables you to track the changes made to files over time — specifically: what changed, by whom, when, and why. It also gives you the capability to revert files back to a previous state. Over time, as your project evolves, you can edit your files with confidence knowing that at any point you can look back and recover a previous version. Install Debian/Ubuntu sudo apt-get install git macOS Download the installer at: https://git-scm.com/download/mac Windows Download the installer at: https://git-scm.com/download/win Setup Once Git is installed, configure it with your name and email address. This lets Git know who you are so that it can associate you with the commits you make. git config --global user.name \"John Doe\" git config --global user.email johndoe@example.com Basic Commands git init Tells git to enable tracking of changes that happen in this folder. git clone <url> | <user@server:path/to/repo.git> Makes a full copy of an existing git repository — all files, folders, changes, history, etc. git status Lists which files are in which state — if there have been changes made, new files added or deleted, etc. git add <file> To begin tracking a new file. Once you run git add , your file will be tracked and staged to be committed. git add -p Review the changes you've made and select which will be staged . git commit Commits all the staged changes (done with git add ). It will prompt you for a commit message , which should be a terse but descriptive note about the changes contained in the commit. These commit messages are your project's history. git rm <file> Stages the file to be removed. After you commit, the file will be removed and no longer tracked. But the file does remain in the project history. git mv <file-from> <file-to> Moves/renames a file. git log Lists your commit history. It's not as user-friendly or easy-to-navigate as tig . tig A text-mode interface for git that allows you to easily browse through your commit history. It is not part of git and will need to be installed ( apt-get install tig for Debian/Ubuntu; Homebrew instructions for macOS) git push Push your local changes to another repository, for example on GitHub. git pull Pull changes from another repository to your local repository. GitHub GitHub is an online platform where you can store and share your projects; it is especially well suited for working on a project with several other people. It acts as a central place where everyone can access/contribute to the project and offers several useful tools (issues, wikis, project milestones, user management, etc) that make collaboration simple and easy. To create a profile, go to GitHub , and from there, follow the prompts to create your account. Resources GitHub offers an interactive Git tutorial that is a great starting point for beginners. The free Pro Git Book covers just about everything Git has to offer using clear and easy-to-understand language. It starts with the basics, but builds up to some of Git's more complex features. If you like video tutorials, the Intro to Git and GitHub and The Basics of Git and GitHub videos are worth watching if you're still unsure about the basics of Git and GitHub and want a step-by-step explanation of how to get started. For any questions you might have about using GitHub, see GitHub Help . The Git Reference Manual is the official docs for Git. It has all the information you could want to know about Git, but is pretty dense and better suited for intermediate and advanced users.","tags":"tools","title":"Git"},{"url":"faq/","text":"","tags":"pages","title":"Frequently Asked Questions"},{"url":"contributing/","text":"Found a problem or have a suggestion for how these docs can be improved? You can report it on the issues tracker on GitHub. And... while bug reports are welcome, patches are even more welcome. ;-) The git repository for this site is hosted on GitHub . If you are not already familiar with git and/or GitHub, read our git documentation first. If your proposed fix is limited to content, then you can probably skip setting up the build system. You can simply make your changes (content is written in reStructuredText ) and submit a Pull Request . The website is generated by Pelican and the template is written using Jinja2 . So, if your proposed changes are more widespread or change the template, you'll need to setup the build environment. Don't worry; it's easy. install pelican ( apt-get install pelican on Debian; pip install --user pelican on other OSs.) install beautifulsoup4 (again: apt-get install python-beautifulsoup or pip install --user beautifulsoup4 respectively), which is required by some pelican plugins we use run make devserver open a browser to http://127.0.0.1:8000 And that's it. Any changes you make will automatically trigger a rebuild.","tags":"pages","title":"Contributing to the Docs"}]}